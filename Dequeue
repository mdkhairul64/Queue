//// in this queue i can push and pop from the both side

///if i push in the back this is called push_back

// if i pop from the back this is called pop_back

// in the case of front this is called push_front and pop_front

/// in the doubly ended queue i can implement both the stack and queue
// in case of deque the operatin are reverse 
//
#include<bits/stdc++.h>
using namespace std;

class Deque{
    int *arr;
    int front;
    int rear;
    int size;

public:
    Deque(int n)
    {
        size = n;
        arr = new int[size];
        front = -1;
        rear = -1;
    }
    bool push_front(int x)
    {
        //check whether full or not
        if(isFull())
        {
            return false;
        }
        else if(isEmpty())
        {
            front = rear = 0;
        }
        else if(front == 0 && rear != size-1)
        {
            front = size-1;
        }

        arr[front] = x;
        return true; //which means that i can push the value
    }
    bool push_rear(int x)
    {
             //check whether full or not
        if(isFull())
        {
            return false;
        }
        else if(isEmpty())
        {
            front = rear =0;
        }
        else if(rear == size-1 && front != 0)
        {
            rear = 0;
        }
        else {
            rear++;
        }
        arr[rear] = x;
        return true;
    }


    int popFont()
    {
        if(isEmpty())
        {
            return -1;
        }

        int ans = arr[front];
        arr[front] = -1;

        if(front == rear)
        {
            front = rear = -1;
        }

        else if( front == size - 1)
        {
            front = 0;
        }
        else{
            front++;
        }

        return ans;
    }
    int popRear()
    {
        if(isEmpty())
        {
            return -1;
        }

        int ans = arr[rear];
        arr[rear] = -1;

        if(front == rear)
        {
            front = rear = -1;
        }
        else if(rear == 0)
        {
            rear = size -1;
        }
        else {
            rear--;
        }
        return ans;
    }
    
    int getFront()
    {
        if(isEmpty())
        {
            return -1;
        }
        return arr[front];
    }

    int getRear()
    {
        if(isEmpty())
        {
            return -1;
        }
        return arr[rear];
    }

    bool isEmpty()
    {
        if(front == -1)
        {
            return true;
        }
        else {
            return false;
        }

    }
    bool isFull()
    {
        if( (front == 0 && rear == size-1) || (front != 0 && rear == (front-1)%(size-1) ))
        {
            return true;
        }
        else {
            return false;
        }
    }
};

int main()
{

}
