#include<bits/stdc++.h>
using namespace std;


class Circularque{
    int *arr;
    int front;
    int rear;
    int size;

    public:
        Circularque(int n)
        {
            size = n;
            arr = new int[size];
            rear = -1;
            front = -1;
        }

    bool enque_push(int value)
    {
        if((front == 0 && rear == size-1) || (rear == (front-1)%(size-1)))///as it is a circular queeu so the front can before the rear
        {
            cout<<"queue is full"<<endl;
            return false;
        }
        else if(front == -1)///pushing the first element
        {

            front = rear = 0;
            arr[rear] = value;

        }
        else if(rear == size-1 && front != 0)
        {
            rear = 0;
            arr[rear] = value;
        }

        else{
            rear++;
            arr[rear] = value;
        }
    
    }
    //this is another function for pushing the element in the queue
    // void enqueu(int x)
    // {
    //     if(front==-1 && rear==-1)
    //     {
    //         front=rear=0;
    //         arr[rear]=x;
    //     }
    //     else if(((rear+1)%size)==front)
    //     {
    //         cout<<"queue is full"<<endl;
    //     }
    //     else {
    //         rear=(rear+1)%size;
    //         arr[rear]=x;
    //     }
    // }
    // void dequeu()
    // {
    //     if(front==-1&&rear==-1)
    //     {
    //         cout<<"queue is empty"<<endl;
    //     }
    //     else if(front==rear)//this is for remainig one element
    //     {
    //         front=rear=-1;
    //     }
    //     else{
    //         ///in this circular queue i can not ++ the front because this can point other index so i use the mod operation

    //         front=(front+1)%size;
    //     }
    // }
    int dequeue_pop()
    {
        if(front == -1)
        {
            cout<<"queue is empty"<<endl;

        }
        int ans = arr[front];
        arr[front]-1;

        if(front == rear)///this means that there is only single  element
    
        {
            front = rear = -1;
        }
        else if(front == size-1)
        {
            front = 0;
        }
        else{
            front++;
        }
        return ans;     ///this return depends on question type
    }

    void display()
    {
        if(front == -1 && rear == -1)
        {
            cout<<"queue is empty"<<endl;
        }
        else {
            int i = front;
            while(i != rear)
            {
                cout<<arr[i]<<" ";
                i = (i+1)%size;
            }
            cout<<arr[rear]<<endl;
        }
    }
    
};

int main()
{
    Circularque que(5);

    que.enque_push(1);
    que.enque_push(2);
    que.enque_push(3);


  //  cout<<
}
